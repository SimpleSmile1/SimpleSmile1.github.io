InputStreamReader inr = new InputStreamReader(System.in);
BufferReader br = new BufferReader(inr);
ByteArrayOutputStream baos = new ByteArrayOutputStream();运行此句会自动在内存里创建一个ByteArray数组
DataOutputStream dos = new DataOutputStream(baos);
ByteArrayInputStream bis = new ByteArrayInputStream(baos.toByteArray());
DataInputStream dis = new DataInputStream(bis);
死锁
public class TestDeadLock implements Runnable{
  public int flag = 1;
  static Object o1 = new Object(),o2 = new Object();
  public void run(){
    System.out.println("flag="+flag);
    if(flag == 1){
      synchronized(o1){
        try{
          Thread.sleep(500);
          }catch(Exception e){
            e.printStackTrace();
          }
      synchronized(o2){
        System.out.println("1");
        }
      }
    }
  if(flag == 0){
    synchronized(o2){
        try{
          Thread.sleep(500);
          }catch(Exception e){
            e.printStackTrace();
          }
      synchronized(o2){
        System.out.println("1");
        }
       }
  }
 }
 
 public static void main(String [] args){
    TestDeadLock td1 = new TestDeadLock();
    TestDeadLock td2 = new TestDeadLock();
    td1.flag = 1;
    td2.flag = 2;
    Thread t1 = new Thread(td1);
    Thread t2 = new Thread(td2);
    t1.start();
    t2.start();
  }
}


消费者生产者
public class ProducerConsumer{
	public static void main(String[] args){
		SyncStack ss = new SyncStack();
		Producer pp = new Producer(ss);
		Consumer cc = new Consumer(ss);
		new Thread(pp).start();
		new Thread(cc).start();
	}
}

class Bun{
	int id;
	Bun(int id){
		this.id = id;
	}
}

class SyncStack{
	Bun[] arrBun = new Bun[6];
	int index = 0;
	
	public synchronized void push(Bun bun){
		if(index == arrBun.length){
			try{
				this.wait();
			}catch(InterruptedException e){
				e.printStackTrace();
			}
		}
		this.notify();
		arrBun[index] = bun;
		index ++;
	}
	
	public synchronized Bun pop(){
		if(index == 0){
			try{
				this.wait();
			}catch(InterruptedException e){
				e.printStackTrace();
			}
			
		}
		index --;
		this.notify();
		return arrBun[index];
	}
}

class Producer implements Runnable{
	SyncStack ss = null;
	Producer(SyncStack ss){
		this.ss = ss;
	}
	public void run(){
		for(int i=0; i<20; i++){
			Bun bun = new Bun(i);
			ss.push(bun);
			System.out.println("生产:"+bun);
		}
		}
	}
}

class Consumer implements Runnable{
	SyncStack ss = null;
	Consumer(SyncStack ss){
		this.ss = ss;
	}
	public void run(){
		for(int i=0; i<20; i++){
			Bun bun = ss.pop();
			System.out.println("消费:"+bun);
		}
		try{
			Thread.sleep();
		}catch(InterruptedException e){
			e.printStackTrace();
		}
	}
}
